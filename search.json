[{"path":"https://fenguoerbian.github.io/LogisticFAR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://fenguoerbian.github.io/LogisticFAR/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://fenguoerbian.github.io/LogisticFAR/articles/Oracle_Estimator.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Oracle Estimator","text":"note talk properties oracle estimator. LogisticFAR package deals high-dimensional logistic regression problem groupwise-covariate selection feature sum--zero constraint. oracle estimator, important covariates pre-given, ’s need variable selection part. just need perform logistic regression sum--zero constrant. First generate toy example: generate sample size 200, 1 demographical variables 3 groups covariates, group contains 2 covariates. omit non-important group covariates since included oracle estimator. Note group covariate coefficient vector satisfying ∑j=1p𝛈j=𝟎kn. \\sum\\limits_{j = 1}^p\\bm{\\eta}_j = \\bm{0}_{kn}.","code":"set.seed(1024) n <- 200 kn <- 2 p <- 3 demox <- matrix(rnorm(n), nrow = n) fx <- matrix(rnorm(n * p * kn), nrow = n) beta0 <- c(1,    # intercept            1,    # demographical covariates            1, -2,    # group covaritates 1            -2, 1,    # group covariates 2            1, 1    # group covariates 3            ) logit0 <- cbind(1, demox, fx) %*% beta0 pi0 <- exp(logit0) / (1 + exp(logit0)) y <- rbinom(n, size = 1, prob = pi0)"},{"path":[]},{"path":"https://fenguoerbian.github.io/LogisticFAR/articles/Oracle_Estimator.html","id":"fit-the-model-via-glm","dir":"Articles","previous_headings":"Oracle Estimator","what":"Fit the model via glm","title":"Oracle Estimator","text":"Since low-dimensional model structure given, can safely pick reference level fit non-constraint model via glm use 3rd group reference level full covariate effect vector ","code":"logitx <- cbind(demox, fx[, c(1, 3)] - fx[, 5], fx[, c(2, 4)] - fx[, 6]) colnames(logitx) <- c(\"demo\",                        \"x1_ref5\", \"x2_ref6\",                        \"x3_ref5\", \"x4_ref6\") glmfit <- glm(y ~ logitx, family = binomial()) glmfit$coefficients #>   (Intercept)    logitxdemo logitxx1_ref5 logitxx2_ref6 logitxx3_ref5  #>     0.5655721     1.0069234     0.7934938    -1.6096452    -1.6637660  #> logitxx4_ref6  #>     0.8454335 glmest <- c(glmfit$coefficients,              -(glmfit$coefficients[\"logitxx1_ref5\"] + glmfit$coefficients[\"logitxx3_ref5\"]),              -(glmfit$coefficients[\"logitxx2_ref6\"] + glmfit$coefficients[\"logitxx4_ref6\"])) names(glmest) <- c(\"intercept\", \"demo\",                     paste(\"x\", 1 : 6, sep = \"\")) glmest #>  intercept       demo         x1         x2         x3         x4         x5  #>  0.5655721  1.0069234  0.7934938 -1.6096452 -1.6637660  0.8454335  0.8702722  #>         x6  #>  0.7642117"},{"path":"https://fenguoerbian.github.io/LogisticFAR/articles/Oracle_Estimator.html","id":"fit-the-model-via-logisticfarlogistic_far_path_further_improve","dir":"Articles","previous_headings":"Oracle Estimator","what":"Fit the model via LogisticFAR::Logistic_FAR_Path_Further_Improve","title":"Oracle Estimator","text":"LogisticFAR::Logistic_FAR_Path_Further_Improve used post-selection estimation essentially unpenalized estiamtor, suitable oracle estimation long give right model structure. LogisticFAR::Logistic_FAR_Path_Further_Improve, objective function takes form −1aloglik(δ,η,weight_vec)+lam*(δTδ+ηTη)+μ1∑j=1pηj+μ22∥∑j=1pηj∥22 \\frac{-1}{}\\mathrm{loglik}\\left( \\delta, \\eta, weight\\_vec \\right) + lam * \\left( \\delta^T\\delta + \\eta^T\\eta \\right) + \\mu_1\\sum\\limits_{j = 1}^p\\eta_j + \\frac{\\mu_2}{2}\\left\\| \\sum\\limits_{j = 1}^p\\eta_j \\right\\|_2^2 Therefore mu2 controls balance MLE sum--zero constraint, lam robust ridge-type regularizer weight_vec weight observation. Varying parameters lead different estimators glm one.","code":"h <- 2    # intercept term is included far_x <- cbind(1, demox, fx) delta_init <- rep(0, 2) eta_init <- rep(0.001, p * kn) farfit <- LogisticFAR::Logistic_FAR_Path_Further_Improve(far_x, y, h = h, k_n = kn, p = p,                                                           delta_vec_init = delta_init,                                                           eta_stack_init = eta_init,                                                           mu1_vec_init = rep(0, kn),                                                           a = 1,                                                           weight_vec = 1,                                                           mu2 = 5,                                                           lam = 0.001, tol = 10 ^ (-10)) farest <- c(farfit$delta_vec, farfit$eta_stack_vec) names(farest) <- c(\"intercept\", \"demo\",                     paste(\"x\", 1 : 6, sep = \"\")) farest #>  intercept       demo         x1         x2         x3         x4         x5  #>  0.5653995  1.0066646  0.7932918 -1.6633419 -1.6091950  0.8452099  0.8159059  #>         x6  #>  0.8181323"},{"path":"https://fenguoerbian.github.io/LogisticFAR/articles/Oracle_Estimator.html","id":"check-the-langrangian-condition","dir":"Articles","previous_headings":"","what":"Check the langrangian condition","title":"Oracle Estimator","text":"method subgradient(equivalently KKT condition), know oracel estimator η̂jor\\hat{\\eta}_j^{} satisfies 1aXjT(π(η̂)−y)+lor=𝟎kn,∀j=1,⋯,p. \\frac{1}{}X_j^T\\left( \\pi\\left(\\hat{\\eta}^{}\\right) - y \\right) + l^{} = \\bm{0}_{kn} ,\\quad\\forall j = 1, \\cdots, p. can verify condition oracle estimator.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/articles/Oracle_Estimator.html","id":"glm-fit","dir":"Articles","previous_headings":"Check the langrangian condition","what":"glm fit","title":"Oracle Estimator","text":"","code":"pi_vec_glm <- glmfit$fitted.values t(fx) %*% (pi_vec_glm - y) #>            [,1] #> [1,] -0.1975975 #> [2,]  4.1625945 #> [3,] -0.1975975 #> [4,]  4.1625945 #> [5,] -0.1975975 #> [6,]  4.1625945"},{"path":"https://fenguoerbian.github.io/LogisticFAR/articles/Oracle_Estimator.html","id":"logisticfar-fit","dir":"Articles","previous_headings":"Check the langrangian condition","what":"LogisticFAR fit","title":"Oracle Estimator","text":"can see, satisfy condition(numerical error). oracle estimator glm based referencing group accurate LogisticFAR fit since robust regularizer LogisticFAR objective function also tol mu2 also adjusted accurate estimator. NOTE: plug-real underlying parameters, get","code":"pi_vec_far <- exp(far_x %*% c(farfit$delta_vec, farfit$eta_stack_vec)) / (1 + exp(far_x %*% c(farfit$delta_vec, farfit$eta_stack_vec))) t(fx) %*% (pi_vec_far - y) #>            [,1] #> [1,] -0.1984088 #> [2,]  4.1651383 #> [3,] -0.1950729 #> [4,]  4.1614994 #> [5,] -0.1984187 #> [6,]  4.1617573 t(fx) %*% (pi0 - y) #>            [,1] #> [1,]  1.1648309 #> [2,]  2.8939424 #> [3,] -2.2444846 #> [4,]  4.3283496 #> [5,] -0.2705459 #> [6,]  4.7280568"},{"path":"https://fenguoerbian.github.io/LogisticFAR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Chao Cheng. Author, maintainer.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cheng C (2024). LogisticFAR: Logistic Functional Additive Regression log-contrast constrain. R package version 0.0.0.9015, https://github.com/fenguoerbian/LogisticFAR/, https://fenguoerbian.github.io/LogisticFAR/.","code":"@Manual{,   title = {LogisticFAR: Logistic Functional Additive Regression with log-contrast constrain},   author = {Chao Cheng},   year = {2024},   note = {R package version 0.0.0.9015, https://github.com/fenguoerbian/LogisticFAR/},   url = {https://fenguoerbian.github.io/LogisticFAR/}, }"},{"path":"https://fenguoerbian.github.io/LogisticFAR/index.html","id":"logisticfar","dir":"","previous_headings":"","what":"Logistic Functional Additive Regression with log-contrast constrain","title":"Logistic Functional Additive Regression with log-contrast constrain","text":"package implements Functional Compositional data Quadratic Method(FCQM) algorithm proposed paper Biomarker Detection Disease Classification Longitudinal Microbiome Data. logistic functional additive regression log-contrast constrain.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Logistic Functional Additive Regression with log-contrast constrain","text":"can use remotes directly install latest version Github. ’ve installed devtools, remotes already installed.","code":"#install.packages(\"devtools\") remotes::install_github(\"fenguoerbian/LogisticFAR\")"},{"path":"https://fenguoerbian.github.io/LogisticFAR/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Logistic Functional Additive Regression with log-contrast constrain","text":"toy example added.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/BIC_Pick.html","id":null,"dir":"Reference","previous_headings":"","what":"Pick the optimal lambda according to the BIC criteria. — BIC_Pick","title":"Pick the optimal lambda according to the BIC criteria. — BIC_Pick","text":"function picks optimal lambda solution path using BIC criteria.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/BIC_Pick.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pick the optimal lambda according to the BIC criteria. — BIC_Pick","text":"","code":"BIC_Pick(   y_vec,   x_mat,   solution_path,   real_logit_vec,   k_n,   a = 1,   bic_kn = k_n,   complex_bound )"},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/BIC_Pick.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pick the optimal lambda according to the BIC criteria. — BIC_Pick","text":"y_vec response vector, 0 control, 1 case. n = length(y_vec) number observations. x_mat covariate matrix, consists two parts. dim(x_mat) = (n, h + p * kn) First h columns demographical covariates(can include intercept term) Rest columns p functional covariates, represented set basis functions resulting kn covariates. solution_path solution path function Logistic_FAR_Path real_logit_vec used function k_n number basis functions.(also number covariates group) scalar adjusting loglik first part BIC bic_kn scalar adjusting model complexsity part BIC complex_bound Numeric, upper bound model complexsity considered. supplied, functional covariates considered. case p > n, may lead model saturation makes BIC cirteria favor much complex model offers near-perfect fitting results training set.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/BIC_Pick.html","id":"bic","dir":"Reference","previous_headings":"","what":"BIC","title":"Pick the optimal lambda according to the BIC criteria. — BIC_Pick","text":"function, BIC defined $$   BIC = 1 / * loglik + df * log(n) / bic_kn   , $$ df degree freedom model. case, number active covariates functional part x_mat. Since algorithm form problem group lasso scenario, number active covariates equals number active functional \\(x(t)\\) times number basis functions k_n.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/CV_Pick.html","id":null,"dir":"Reference","previous_headings":"","what":"Pick an optimal lambda from a CV solution path — CV_Pick","title":"Pick an optimal lambda from a CV solution path — CV_Pick","text":"function picks best estimation CV solution path.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/CV_Pick.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pick an optimal lambda from a CV solution path — CV_Pick","text":"","code":"CV_Pick(   y_vec,   x_mat,   cv_solution_path,   real_logit_vec,   kn,   complex_bound,   cv_1se = FALSE )"},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/CV_Pick.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pick an optimal lambda from a CV solution path — CV_Pick","text":"y_vec response vector, 0 control, 1 case. n = length(y_vec) number observations. x_mat covariate matrix, consists two parts. dim(x_mat) = (n, h + p * kn) First h columns demographical covariates(can include intercept term) Rest columns p functional covariates, represented set basis functions resulting kn covariates. cv_solution_path solution path related cross validation information. result Logistic_FAR_CV_opath, Logistic_FAR_CV_opath_par Logistic_FAR_CV_Path. real_logit_vec used function kn number basis functions functional covariates. complex_bound upper bound number active functional covariates considered. missing, whole path considered. cv_1se Logical. Whether 1se strategy applied.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/CV_Pick.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pick an optimal lambda from a CV solution path — CV_Pick","text":"Although solver function always return selected lambda function offers selecting options.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/CV_Pick.html","id":"-se-strategy","dir":"Reference","previous_headings":"","what":"1se Strategy","title":"Pick an optimal lambda from a CV solution path — CV_Pick","text":"largest value lambda error within 1 standard error maximum likelihood based CV","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FARMM_CV_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross-validation for solution path of Logistic FAR. — Logistic_FARMM_CV_path","title":"Cross-validation for solution path of Logistic FAR. — Logistic_FARMM_CV_path","text":"Logistic_FARMM_CV_path finds solution path logistic functional additive regression log-contrast constrain via Logistic_FAR_Path. use cross-validation assess goodness estimations solution path.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FARMM_CV_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross-validation for solution path of Logistic FAR. — Logistic_FARMM_CV_path","text":"","code":"Logistic_FARMM_CV_path(   y_vec,   x_mat,   h,   kn,   p,   rand_eff_df,   p_type,   p_param,   lambda_seq,   lambda_length,   min_lambda_ratio = 0.01,   mu2,   a = 1,   bj_vec = rep(1/sqrt(kn), p),   cj_vec = rep(1, p),   rj_vec = 1e-05,   weight_vec = 1,   logit_weight_vec = 1,   weight_already_combine = FALSE,   relax_vec,   delta_init,   eta_stack_init,   mu_1_init,   tol,   max_iter,   nfold = 5,   fold_seed,   post_selection = TRUE,   post_a = 1,   verbose = 0 )"},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FARMM_CV_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross-validation for solution path of Logistic FAR. — Logistic_FARMM_CV_path","text":"y_vec response vector, 0 control, 1 case. n = length(y_vec) number observations. x_mat covariate matrix, consists two parts. dim(x_mat) = (n, h + p * kn) First h columns demographical covariates(can include intercept term) Rest columns p functional covariates, represented set basis functions resulting kn covariates. h, kn, p dimension information dataset(x_mat). rand_eff_df data.frame random effect related data. must contain least one column named \"subj_vec_fct\", indicates subject level. column rand_eff_df, constant random effect applied. column(s), additively added random effect slope term. number rows rand_eff_df length(y_vec). p_type character variable indicating different types penalty p_param numerical vector penalty function. p_param[1] store sthe lambda value provided lambda_seq. lambda_seq non-negative sequence lambda, along solution path searched. RECOMMENED supply parameter let function determines given data. lambda_length length lambda sequence computing lambda_seq. lambda_seq provided, course lambda_length = length(lambda_seq). mu2 quadratic term ADMM algorithm , bj_vec, cj_vec, rj_vec parameters algorithm. See Algorithm_Details.pdf information. weight_vec weight vector subject. final weight subject adjusted also logit_weight_vec. summation final weight vector normalized n, sample size. logit_weight_vec weight vector subject computing integral logit values. entry positive 1. naive method adjusting early stop interval. weight_already_combine boolen, indicating whether weight_vec already combined logit_weight_vec subject. relax_vec used. delta_init, eta_stack_init, mu1_init initial values algorithm. tol, max_iter convergence tolerance max number iteration algorithm. nfold integer, number folds fold_seed supplied, use seed generate partitions cross-validation. Can useful reproducible runs. post_selection bool, function also computes cross-validation results based post selection estimation results. post_a post selection estimation. verbose integer, indicating level information printed computation, currently supports: always: info something went wrong, e.g. penalty function matched 1: information start stop iteration 2. loss value changed iteration min_lam_ratio: min(lambda_seq) / max{lambda_seq}. function uses parameter determine minimal value lambda_seq. p > n, recommended set smaller 0.01 (sometimes even 0.05), otherwise can set 0.001 even smaller. svd_thresh used.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FARMM_CV_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cross-validation for solution path of Logistic FAR. — Logistic_FARMM_CV_path","text":"list containing solution path delta, eta_stack, mu1 computation information convergency, iteration number lambda sequence solution path. Also information CV returned fold ID observation, loglikelihood results test set index highest average loglik testsets. post_selection = TRUE, results based post selection estimation also returned.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FARMM_CV_path.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Cross-validation for solution path of Logistic FAR. — Logistic_FARMM_CV_path","text":"Although function return index lambda given highest averaged loglik testsets. recommended use stand alone *_pick functions packages, CV_Pick find optimal lambda since functions give flexibility.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FARMM_CV_path_par.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross-validation for solution path of Logistic FAR. — Logistic_FARMM_CV_path_par","title":"Cross-validation for solution path of Logistic FAR. — Logistic_FARMM_CV_path_par","text":"Logistic_FARMM_CV_path_par finds solution path logistic functional additive regression log-contrast constrain via Logistic_FAR_Path. use cross-validation assess goodness estimations solution path. cross-validation implemented parallel manner.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FARMM_CV_path_par.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross-validation for solution path of Logistic FAR. — Logistic_FARMM_CV_path_par","text":"","code":"Logistic_FARMM_CV_path_par(   y_vec,   x_mat,   h,   kn,   p,   rand_eff_df,   p_type,   p_param,   lambda_seq,   lambda_length,   min_lambda_ratio = 0.01,   mu2,   a = 1,   bj_vec = rep(1/sqrt(kn), p),   cj_vec = rep(1, p),   rj_vec = 1e-05,   weight_vec = 1,   logit_weight_vec = 1,   weight_already_combine = FALSE,   relax_vec,   delta_init,   eta_stack_init,   mu_1_init,   tol,   max_iter,   nfold = 5,   fold_seed,   post_selection = FALSE,   post_a = 1,   verbose = 0 )"},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FARMM_CV_path_par.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross-validation for solution path of Logistic FAR. — Logistic_FARMM_CV_path_par","text":"y_vec response vector, 0 control, 1 case. n = length(y_vec) number observations. x_mat covariate matrix, consists two parts. dim(x_mat) = (n, h + p * kn) First h columns demographical covariates(can include intercept term) Rest columns p functional covariates, represented set basis functions resulting kn covariates. h, kn, p dimension information dataset(x_mat). rand_eff_df data.frame random effect related data. must contain least one column named \"subj_vec_fct\", indicates subject level. column rand_eff_df, constant random effect applied. column(s), additively added random effect slope term. number rows rand_eff_df length(y_vec). p_type character variable indicating different types penalty p_param numerical vector penalty function. p_param[1] store sthe lambda value provided lambda_seq. lambda_seq non-negative sequence lambda, along solution path searched. RECOMMENED supply parameter let function determines given data. lambda_length length lambda sequence computing lambda_seq. lambda_seq provided, course lambda_length = length(lambda_seq). mu2 quadratic term ADMM algorithm , bj_vec, cj_vec, rj_vec parameters algorithm. See Algorithm_Details.pdf information. weight_vec weight vector subject. final weight subject adjusted also logit_weight_vec. summation final weight vector normalized n, sample size. logit_weight_vec weight vector subject computing integral logit values. entry positive 1. naive method adjusting early stop interval. weight_already_combine boolen, indicating whether weight_vec already combined logit_weight_vec subject. relax_vec used. delta_init, eta_stack_init, mu1_init initial values algorithm. tol, max_iter convergence tolerance max number iteration algorithm. nfold integer, number folds fold_seed supplied, use seed generate partitions cross-validation. Can useful reproducible runs. post_selection bool, function also computes cross-validation results based post selection estimation results. post_a post selection estimation. verbose integer, indicating level information printed computation, currently supports: always: info something went wrong, e.g. penalty function matched 1: information start stop iteration 2. loss value changed iteration min_lam_ratio: min(lambda_seq) / max{lambda_seq}. function uses parameter determine minimal value lambda_seq. p > n, recommended set smaller 0.01 (sometimes even 0.05), otherwise can set 0.001 even smaller. svd_thresh used.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FARMM_CV_path_par.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cross-validation for solution path of Logistic FAR. — Logistic_FARMM_CV_path_par","text":"list containing solution path delta, eta_stack, mu1 computation information convergency, iteration number lambda sequence solution path. Also information CV returned fold ID observation, loglikelihood results test set index highest average loglik testsets. post_selection = TRUE, results based post selection estimation also returned.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FARMM_CV_path_par.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Cross-validation for solution path of Logistic FAR. — Logistic_FARMM_CV_path_par","text":"Although function return index lambda given highest averaged loglik testsets. recommended use stand alone *_pick functions packages, CV_Pick find optimal lambda since functions give flexibility.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FARMM_Path.html","id":null,"dir":"Reference","previous_headings":"","what":"Finds the solution path of logistic functional additive regression with log-contrast constrain. — Logistic_FARMM_Path","title":"Finds the solution path of logistic functional additive regression with log-contrast constrain. — Logistic_FARMM_Path","text":"Logistic_FARMM_Path finds solution path logistic functional additive regression log-contrast constrain. perform within-group orthonormalization preprocession data.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FARMM_Path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finds the solution path of logistic functional additive regression with log-contrast constrain. — Logistic_FARMM_Path","text":"","code":"Logistic_FARMM_Path(   y_vec,   x_mat,   h,   kn,   p,   rand_eff_df,   p_type,   p_param,   lambda_seq,   lambda_length,   min_lambda_ratio = 0.01,   mu2,   a = 1,   bj_vec = 1,   cj_vec = sqrt(kn),   rj_vec = 10^(-6),   weight_vec = 1,   logit_weight_vec = 1,   weight_already_combine = FALSE,   delta_init,   eta_stack_init,   mu1_init,   tol = 10^(-6),   max_iter = 500,   verbose = 0,   svd_thresh = 10^{ -7  } )"},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FARMM_Path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finds the solution path of logistic functional additive regression with log-contrast constrain. — Logistic_FARMM_Path","text":"y_vec response vector, 0 control, 1 case. n = length(y_vec) number observations. x_mat covariate matrix, consists two parts. dim(x_mat) = (n, h + p * kn) First h columns demographical covariates(can include intercept term) Rest columns p functional covariates, represented set basis functions resulting kn covariates. h, kn, p dimension information dataset(x_mat). rand_eff_df data.frame random effect related data. must contain least one column named \"subj_vec_fct\", indicates subject level. column rand_eff_df, constant random effect applied. column(s), additively added random effect slope term. number rows rand_eff_df length(y_vec). p_type character variable indicating different types penalty p_param numerical vector penalty function. p_param[1] store sthe lambda value provided lambda_seq. lambda_seq non-negative sequence lambda, along solution path searched. RECOMMENED supply parameter let function determines given data. lambda_length length lambda sequence computing lambda_seq. lambda_seq provided, course lambda_length = length(lambda_seq). mu2 quadratic term ADMM algorithm , bj_vec, cj_vec, rj_vec parameters algorithm. See Algorithm_Details.pdf information. weight_vec weight vector subject. final weight subject adjusted also logit_weight_vec. summation final weight vector normalized n, sample size. logit_weight_vec weight vector subject computing integral logit values. entry positive 1. naive method adjusting early stop interval. weight_already_combine boolen, indicating whether weight_vec already combined logit_weight_vec subject. delta_init, eta_stack_init, mu1_init initial values algorithm. tol, max_iter convergence tolerance max number iteration algorithm. verbose integer, indicating level information printed computation, currently supports: always: info something went wrong, e.g. penalty function matched 1: information start stop iteration 2. loss value changed iteration svd_thresh used min_lam_ratio: min(lambda_seq) / max{lambda_seq}. function uses parameter determine minimal value lambda_seq. p > n, recommended set smaller 0.01 (sometimes even 0.05), otherwise can set 0.001 even smaller.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FARMM_Path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finds the solution path of logistic functional additive regression with log-contrast constrain. — Logistic_FARMM_Path","text":"list containing solution path delta, eta_stack, mu1 computation information convergency, iteration number lambda sequence solution path.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_CV_opath.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross-validation for solution path of Logistic FAR. — Logistic_FAR_CV_opath","title":"Cross-validation for solution path of Logistic FAR. — Logistic_FAR_CV_opath","text":"Logistic_FAR_CV_opath finds solution path logistic functional additive regression log-contrast constrain via Logistic_FAR_OPath, means perform within-group orthonormalization standardize data real computation. Also, uses cross-validation assess goodness estimations solution path.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_CV_opath.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross-validation for solution path of Logistic FAR. — Logistic_FAR_CV_opath","text":"","code":"Logistic_FAR_CV_opath(   y_vec,   x_mat,   h,   kn,   p,   p_type,   p_param,   lambda_seq,   lambda_length,   min_lambda_ratio = 0.01,   mu2,   a = 1,   bj_vec = rep(1/sqrt(kn), p),   cj_vec = rep(1, p),   rj_vec = 1e-05,   svd_thresh = 10^(-6),   relax_vec,   delta_init,   eta_stack_init,   mu_1_init,   tol,   max_iter,   nfold = 5,   fold_seed = NULL,   post_selection = FALSE,   post_a = 1,   verbose = 0 )"},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_CV_opath.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross-validation for solution path of Logistic FAR. — Logistic_FAR_CV_opath","text":"y_vec response vector, 0 control, 1 case. n = length(y_vec) number observations. x_mat covariate matrix, consists two parts. dim(x_mat) = (n, h + p * kn) First h columns demographical covariates(can include intercept term) Rest columns p functional covariates, represented set basis functions resulting kn covariates. h, kn, p dimension information dataset(x_mat). p_type character variable indicating different types penalty p_param numerical vector penalty function. p_param[1] store sthe lambda value provided lambda_seq. lambda_seq non-negative sequence lambda, along solution path searched. RECOMMENED supply parameter let function determines given data. lambda_length length lambda sequence computing lambda_seq. lambda_seq provided, course lambda_length = length(lambda_seq). mu2 quadratic term ADMM algorithm , bj_vec, cj_vec, rj_vec parameters algorithm. See Algorithm_Details.pdf information. svd_thresh small value threashing singular value vectors. relax_vec used delta_init, eta_stack_init, mu1_init initial values algorithm. tol, max_iter convergence tolerance max number iteration algorithm. nfold integer, number folds fold_seed supplied, use seed generate partitions cross-validation. Can useful reproducible runs. post_selection bool, function also computes cross-validation results based post selection estimation results. post_a post selection estimation. verbose integer, indicating level information printed computation, currently supports: always: info something went wrong, e.g. penalty function matched 1: information start stop iteration 2. loss value changed iteration min_lam_ratio: min(lambda_seq) / max{lambda_seq}. function uses parameter determine minimal value lambda_seq. p > n, recommended set smaller 0.01 (sometimes even 0.05), otherwise can set 0.001 even smaller.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_CV_opath.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cross-validation for solution path of Logistic FAR. — Logistic_FAR_CV_opath","text":"list containing solution path delta, eta_stack, mu1 computation information convergency, iteration number lambda sequence solution path. Also information CV returned fold ID observation, loglikelihood results test set index highest average loglik testsets. post_selection = TRUE, results based post selection estimation also returned.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_CV_opath.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Cross-validation for solution path of Logistic FAR. — Logistic_FAR_CV_opath","text":"Although function return index lambda given highest averaged loglik testsets. recommended use stand alone *_pick functions packages, CV_Pick find optimal lambda since functions give flexibility. function conducts cross validation sequential manner. possible parallel implementation, see Logistic_FAR_CV_opath_par.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_CV_opath_par.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross-validation for solution path of Logistic FAR. — Logistic_FAR_CV_opath_par","title":"Cross-validation for solution path of Logistic FAR. — Logistic_FAR_CV_opath_par","text":"Logistic_FAR_CV_opath finds solution path logistic functional additive regression log-contrast constrain via Logistic_FAR_OPath, means perform within-group orthonormalization standardize data real computation. Also, uses cross-validation assess goodness estimations solution path.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_CV_opath_par.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross-validation for solution path of Logistic FAR. — Logistic_FAR_CV_opath_par","text":"","code":"Logistic_FAR_CV_opath_par(   y_vec,   x_mat,   h,   kn,   p,   p_type,   p_param,   lambda_seq,   lambda_length,   min_lambda_ratio = 0.01,   mu2,   a = 1,   bj_vec = rep(1/sqrt(kn), p),   cj_vec = rep(1, p),   rj_vec = 1e-05,   svd_thresh = 10^(-6),   relax_vec,   delta_init,   eta_stack_init,   mu_1_init,   tol,   max_iter,   nfold = 5,   fold_seed,   post_selection = FALSE,   post_a = 1,   verbose = 0 )"},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_CV_opath_par.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross-validation for solution path of Logistic FAR. — Logistic_FAR_CV_opath_par","text":"y_vec response vector, 0 control, 1 case. n = length(y_vec) number observations. x_mat covariate matrix, consists two parts. dim(x_mat) = (n, h + p * kn) First h columns demographical covariates(can include intercept term) Rest columns p functional covariates, represented set basis functions resulting kn covariates. h, kn, p dimension information dataset(x_mat). p_type character variable indicating different types penalty p_param numerical vector penalty function. p_param[1] store sthe lambda value provided lambda_seq. lambda_seq non-negative sequence lambda, along solution path searched. RECOMMENED supply parameter let function determines given data. lambda_length length lambda sequence computing lambda_seq. lambda_seq provided, course lambda_length = length(lambda_seq). mu2 quadratic term ADMM algorithm , bj_vec, cj_vec, rj_vec parameters algorithm. See Algorithm_Details.pdf information. svd_thresh small value threashing singular value vectors. relax_vec used delta_init, eta_stack_init, mu1_init initial values algorithm. tol, max_iter convergence tolerance max number iteration algorithm. nfold integer, number folds fold_seed supplied, use seed generate partitions cross-validation. Can useful reproducible runs. post_selection bool, function also computes cross-validation results based post selection estimation results. post_a post selection estimation. verbose integer, indicating level information printed computation, currently supports: always: info something went wrong, e.g. penalty function matched 1: information start stop iteration 2. loss value changed iteration min_lam_ratio min(lambda_seq) / max{lambda_seq}. function uses parameter determine minimal value lambda_seq. p > n, recommended set smaller 0.01 (sometimes even 0.05), otherwise can set 0.001 even smaller.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_CV_opath_par.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cross-validation for solution path of Logistic FAR. — Logistic_FAR_CV_opath_par","text":"list containing solution path delta, eta_stack, mu1 computation information convergency, iteration number lambda sequence solution path. Also information CV returned fold ID observation, loglikelihood results test set index highest average loglik testsets. post_selection = TRUE, results based post selection estimation also returned.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_CV_opath_par.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Cross-validation for solution path of Logistic FAR. — Logistic_FAR_CV_opath_par","text":"Although function return index lambda given highest averaged loglik testsets. recommended use stand alone *_pick functions packages, CV_Pick find optimal lambda since functions give flexibility. function utilizes future backend future.apply package. can set future::plan() according needs. function utilizes progressr packages provide progress bar capability. End user can use with_progress{Logistic_FAR_CV_opath_par(...)} moniter progress running.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_CV_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross-validation for solution path of Logistic FAR. — Logistic_FAR_CV_path","title":"Cross-validation for solution path of Logistic FAR. — Logistic_FAR_CV_path","text":"Logistic_FAR_CV_path finds solution path logistic functional additive regression log-contrast constrain via Logistic_FAR_Path. use cross-validation assess goodness estimations solution path.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_CV_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross-validation for solution path of Logistic FAR. — Logistic_FAR_CV_path","text":"","code":"Logistic_FAR_CV_path(   y_vec,   x_mat,   h,   kn,   p,   p_type,   p_param,   lambda_seq,   lambda_length,   min_lambda_ratio = 0.01,   mu2,   a = 1,   bj_vec = rep(1/sqrt(kn), p),   cj_vec = rep(1, p),   rj_vec = 1e-05,   weight_vec = 1,   logit_weight_vec = 1,   weight_already_combine = FALSE,   relax_vec,   delta_init,   eta_stack_init,   mu_1_init,   tol,   max_iter,   nfold = 5,   fold_seed,   post_selection = FALSE,   post_a = 1,   verbose = 0 )"},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_CV_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross-validation for solution path of Logistic FAR. — Logistic_FAR_CV_path","text":"y_vec response vector, 0 control, 1 case. n = length(y_vec) number observations. x_mat covariate matrix, consists two parts. dim(x_mat) = (n, h + p * kn) First h columns demographical covariates(can include intercept term) Rest columns p functional covariates, represented set basis functions resulting kn covariates. h, kn, p dimension information dataset(x_mat). p_type character variable indicating different types penalty p_param numerical vector penalty function. p_param[1] store sthe lambda value provided lambda_seq. lambda_seq non-negative sequence lambda, along solution path searched. RECOMMENED supply parameter let function determines given data. lambda_length length lambda sequence computing lambda_seq. lambda_seq provided, course lambda_length = length(lambda_seq). mu2 quadratic term ADMM algorithm , bj_vec, cj_vec, rj_vec parameters algorithm. See Algorithm_Details.pdf information. weight_vec weight vector subject. final weight subject adjusted also logit_weight_vec. summation final weight vector normalized n, sample size. logit_weight_vec weight vector subject computing integral logit values. entry positive 1. naive method adjusting early stop interval. weight_already_combine boolen, indicating whether weight_vec already combined logit_weight_vec subject. relax_vec used. delta_init, eta_stack_init, mu1_init initial values algorithm. tol, max_iter convergence tolerance max number iteration algorithm. nfold integer, number folds fold_seed supplied, use seed generate partitions cross-validation. Can useful reproducible runs. post_selection bool, function also computes cross-validation results based post selection estimation results. post_a post selection estimation. verbose integer, indicating level information printed computation, currently supports: always: info something went wrong, e.g. penalty function matched 1: information start stop iteration 2. loss value changed iteration min_lam_ratio: min(lambda_seq) / max{lambda_seq}. function uses parameter determine minimal value lambda_seq. p > n, recommended set smaller 0.01 (sometimes even 0.05), otherwise can set 0.001 even smaller. svd_thresh used.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_CV_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cross-validation for solution path of Logistic FAR. — Logistic_FAR_CV_path","text":"list containing solution path delta, eta_stack, mu1 computation information convergency, iteration number lambda sequence solution path. Also information CV returned fold ID observation, loglikelihood results test set index highest average loglik testsets. post_selection = TRUE, results based post selection estimation also returned.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_CV_path.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Cross-validation for solution path of Logistic FAR. — Logistic_FAR_CV_path","text":"Although function return index lambda given highest averaged loglik testsets. recommended use stand alone *_pick functions packages, CV_Pick find optimal lambda since functions give flexibility.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_CV_path_par.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross-validation for solution path of Logistic FAR. — Logistic_FAR_CV_path_par","title":"Cross-validation for solution path of Logistic FAR. — Logistic_FAR_CV_path_par","text":"Logistic_FAR_CV_path_par finds solution path logistic functional additive regression log-contrast constrain via Logistic_FAR_Path. use cross-validation assess goodness estimations solution path. cross-validation implemented parallel manner.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_CV_path_par.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross-validation for solution path of Logistic FAR. — Logistic_FAR_CV_path_par","text":"","code":"Logistic_FAR_CV_path_par(   y_vec,   x_mat,   h,   kn,   p,   p_type,   p_param,   lambda_seq,   lambda_length,   min_lambda_ratio = 0.01,   mu2,   a = 1,   bj_vec = rep(1/sqrt(kn), p),   cj_vec = rep(1, p),   rj_vec = 1e-05,   weight_vec = 1,   logit_weight_vec = 1,   weight_already_combine = FALSE,   relax_vec,   delta_init,   eta_stack_init,   mu_1_init,   tol,   max_iter,   nfold = 5,   fold_seed,   post_selection = FALSE,   post_a = 1,   verbose = 0 )"},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_CV_path_par.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross-validation for solution path of Logistic FAR. — Logistic_FAR_CV_path_par","text":"y_vec response vector, 0 control, 1 case. n = length(y_vec) number observations. x_mat covariate matrix, consists two parts. dim(x_mat) = (n, h + p * kn) First h columns demographical covariates(can include intercept term) Rest columns p functional covariates, represented set basis functions resulting kn covariates. h, kn, p dimension information dataset(x_mat). p_type character variable indicating different types penalty p_param numerical vector penalty function. p_param[1] store sthe lambda value provided lambda_seq. lambda_seq non-negative sequence lambda, along solution path searched. RECOMMENED supply parameter let function determines given data. lambda_length length lambda sequence computing lambda_seq. lambda_seq provided, course lambda_length = length(lambda_seq). mu2 quadratic term ADMM algorithm , bj_vec, cj_vec, rj_vec parameters algorithm. See Algorithm_Details.pdf information. weight_vec weight vector subject. final weight subject adjusted also logit_weight_vec. summation final weight vector normalized n, sample size. logit_weight_vec weight vector subject computing integral logit values. entry positive 1. naive method adjusting early stop interval. weight_already_combine boolen, indicating whether weight_vec already combined logit_weight_vec subject. relax_vec used. delta_init, eta_stack_init, mu1_init initial values algorithm. tol, max_iter convergence tolerance max number iteration algorithm. nfold integer, number folds fold_seed supplied, use seed generate partitions cross-validation. Can useful reproducible runs. post_selection bool, function also computes cross-validation results based post selection estimation results. post_a post selection estimation. verbose integer, indicating level information printed computation, currently supports: always: info something went wrong, e.g. penalty function matched 1: information start stop iteration 2. loss value changed iteration min_lam_ratio: min(lambda_seq) / max{lambda_seq}. function uses parameter determine minimal value lambda_seq. p > n, recommended set smaller 0.01 (sometimes even 0.05), otherwise can set 0.001 even smaller. svd_thresh used.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_CV_path_par.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cross-validation for solution path of Logistic FAR. — Logistic_FAR_CV_path_par","text":"list containing solution path delta, eta_stack, mu1 computation information convergency, iteration number lambda sequence solution path. Also information CV returned fold ID observation, loglikelihood results test set index highest average loglik testsets. post_selection = TRUE, results based post selection estimation also returned.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_CV_path_par.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Cross-validation for solution path of Logistic FAR. — Logistic_FAR_CV_path_par","text":"Although function return index lambda given highest averaged loglik testsets. recommended use stand alone *_pick functions packages, CV_Pick find optimal lambda since functions give flexibility.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_FLiRTI_CV_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross-validation for solution path of Logistic FAR. — Logistic_FAR_FLiRTI_CV_path","title":"Cross-validation for solution path of Logistic FAR. — Logistic_FAR_FLiRTI_CV_path","text":"Logistic_FAR_FLiRTI_CV_path finds solution path logistic functional additive regression log-contrast constrain via Logistic_FAR_FLiRTI_Path. use cross-validation assess goodness estimations solution path.  NOTE: documentation needs double checked updated!","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_FLiRTI_CV_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross-validation for solution path of Logistic FAR. — Logistic_FAR_FLiRTI_CV_path","text":"","code":"Logistic_FAR_FLiRTI_CV_path(   y_vec,   x_mat,   h,   kn,   p,   p_type,   p_param,   lambda_seq,   lambda_length,   min_lambda_ratio = 0.01,   mu2,   a = 1,   bj_vec = rep(1/sqrt(kn), p),   cj_vec = rep(1, p),   rj_vec = 1e-05,   weight_vec = weight_vec,   relax_vec,   delta_init,   eta_stack_init,   mu_1_init,   tol,   max_iter,   nfold = 5,   fold_seed,   post_selection = FALSE,   post_a = 1,   verbose = 0 )"},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_FLiRTI_CV_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross-validation for solution path of Logistic FAR. — Logistic_FAR_FLiRTI_CV_path","text":"y_vec response vector, 0 control, 1 case. n = length(y_vec) number observations. x_mat covariate matrix, consists two parts. dim(x_mat) = (n, h + p * kn) First h columns demographical covariates(can include intercept term) Rest columns p functional covariates, represented set basis functions resulting kn covariates. h, kn, p dimension information dataset(x_mat). p_type character variable indicating different types penalty p_param numerical vector penalty function. p_param[1] store sthe lambda value provided lambda_seq. lambda_seq non-negative sequence lambda, along solution path searched. RECOMMENED supply parameter let function determines given data. lambda_length length lambda sequence computing lambda_seq. lambda_seq provided, course lambda_length = length(lambda_seq). mu2 quadratic term ADMM algorithm , bj_vec, cj_vec, rj_vec parameters algorithm. See Algorithm_Details.pdf information. relax_vec used. delta_init, eta_stack_init, mu1_init initial values algorithm. tol, max_iter convergence tolerance max number iteration algorithm. nfold integer, number folds fold_seed supplied, use seed generate partitions cross-validation. Can useful reproducible runs. post_selection bool, function also computes cross-validation results based post selection estimation results. post_a post selection estimation. verbose integer, indicating level information printed computation, currently supports: always: info something went wrong, e.g. penalty function matched 1: information start stop iteration 2. loss value changed iteration min_lam_ratio: min(lambda_seq) / max{lambda_seq}. function uses parameter determine minimal value lambda_seq. p > n, recommended set smaller 0.01 (sometimes even 0.05), otherwise can set 0.001 even smaller. svd_thresh used.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_FLiRTI_CV_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cross-validation for solution path of Logistic FAR. — Logistic_FAR_FLiRTI_CV_path","text":"list containing solution path delta, eta_stack, mu1 computation information convergency, iteration number lambda sequence solution path. Also information CV returned fold ID observation, loglikelihood results test set index highest average loglik testsets. post_selection = TRUE, results based post selection estimation also returned.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_FLiRTI_CV_path.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Cross-validation for solution path of Logistic FAR. — Logistic_FAR_FLiRTI_CV_path","text":"Although function return index lambda given highest averaged loglik testsets. recommended use stand alone *_pick functions packages, CV_Pick find optimal lambda since functions give flexibility.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_FLiRTI_CV_path_par.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross-validation for solution path of Logistic FAR. — Logistic_FAR_FLiRTI_CV_path_par","title":"Cross-validation for solution path of Logistic FAR. — Logistic_FAR_FLiRTI_CV_path_par","text":"Logistic_FAR_CV_path_par finds solution path logistic functional additive regression log-contrast constrain via Logistic_FAR_Path. use cross-validation assess goodness estimations solution path. cross-validation implemented parallel manner.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_FLiRTI_CV_path_par.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross-validation for solution path of Logistic FAR. — Logistic_FAR_FLiRTI_CV_path_par","text":"","code":"Logistic_FAR_FLiRTI_CV_path_par(   y_vec,   x_mat,   h,   kn,   p,   p_type,   p_param,   lambda_seq,   lambda_length,   min_lambda_ratio = 0.01,   mu2,   a = 1,   bj_vec = rep(1/sqrt(kn), p),   cj_vec = rep(1, p),   rj_vec = 1e-05,   weight_vec = 1,   relax_vec,   delta_init,   eta_stack_init,   mu_1_init,   tol,   max_iter,   nfold = 5,   fold_seed,   post_selection = FALSE,   post_a = 1,   verbose = 0 )"},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_FLiRTI_CV_path_par.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross-validation for solution path of Logistic FAR. — Logistic_FAR_FLiRTI_CV_path_par","text":"y_vec response vector, 0 control, 1 case. n = length(y_vec) number observations. x_mat covariate matrix, consists two parts. dim(x_mat) = (n, h + p * kn) First h columns demographical covariates(can include intercept term) Rest columns p functional covariates, represented set basis functions resulting kn covariates. h, kn, p dimension information dataset(x_mat). p_type character variable indicating different types penalty p_param numerical vector penalty function. p_param[1] store sthe lambda value provided lambda_seq. lambda_seq non-negative sequence lambda, along solution path searched. RECOMMENED supply parameter let function determines given data. lambda_length length lambda sequence computing lambda_seq. lambda_seq provided, course lambda_length = length(lambda_seq). mu2 quadratic term ADMM algorithm , bj_vec, cj_vec, rj_vec parameters algorithm. See Algorithm_Details.pdf information. relax_vec used. delta_init, eta_stack_init, mu1_init initial values algorithm. tol, max_iter convergence tolerance max number iteration algorithm. nfold integer, number folds fold_seed supplied, use seed generate partitions cross-validation. Can useful reproducible runs. post_selection bool, function also computes cross-validation results based post selection estimation results. post_a post selection estimation. verbose integer, indicating level information printed computation, currently supports: always: info something went wrong, e.g. penalty function matched 1: information start stop iteration 2. loss value changed iteration min_lam_ratio: min(lambda_seq) / max{lambda_seq}. function uses parameter determine minimal value lambda_seq. p > n, recommended set smaller 0.01 (sometimes even 0.05), otherwise can set 0.001 even smaller. svd_thresh used.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_FLiRTI_CV_path_par.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cross-validation for solution path of Logistic FAR. — Logistic_FAR_FLiRTI_CV_path_par","text":"list containing solution path delta, eta_stack, mu1 computation information convergency, iteration number lambda sequence solution path. Also information CV returned fold ID observation, loglikelihood results test set index highest average loglik testsets. post_selection = TRUE, results based post selection estimation also returned.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_FLiRTI_CV_path_par.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Cross-validation for solution path of Logistic FAR. — Logistic_FAR_FLiRTI_CV_path_par","text":"Although function return index lambda given highest averaged loglik testsets. recommended use stand alone *_pick functions packages, CV_Pick find optimal lambda since functions give flexibility.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_FLiRTI_Path.html","id":null,"dir":"Reference","previous_headings":"","what":"Finds the solution path of logistic functional additive regression with log-contrast constrain and FLiRTI strategy — Logistic_FAR_FLiRTI_Path","title":"Finds the solution path of logistic functional additive regression with log-contrast constrain and FLiRTI strategy — Logistic_FAR_FLiRTI_Path","text":"Logistic_FAR_FLiRTI_Path finds solution path logistic functional additive regression log-contrast constrain. perform within-group orthonormalization preprocession data. NOTE: documentation needs double checked updated!","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_FLiRTI_Path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finds the solution path of logistic functional additive regression with log-contrast constrain and FLiRTI strategy — Logistic_FAR_FLiRTI_Path","text":"","code":"Logistic_FAR_FLiRTI_Path(   y_vec,   x_mat,   h,   kn,   p,   p_type,   p_param,   lambda_seq,   lambda_length,   min_lambda_ratio = 0.01,   mu2,   a = 1,   bj_vec = 1,   cj_vec = sqrt(kn),   rj_vec = 10^(-6),   weight_vec = 1,   delta_init,   eta_stack_init,   mu1_init,   tol = 10^(-6),   max_iter = 500,   verbose = 0,   svd_thresh = 10^{ -7  } )"},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_FLiRTI_Path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finds the solution path of logistic functional additive regression with log-contrast constrain and FLiRTI strategy — Logistic_FAR_FLiRTI_Path","text":"y_vec response vector, 0 control, 1 case. n = length(y_vec) number observations. x_mat covariate matrix, consists two parts. dim(x_mat) = (n, h + p * kn) First h columns demographical covariates(can include intercept term) Rest columns p functional covariates, represented set basis functions resulting kn covariates. h, kn, p dimension information dataset(x_mat). p_type character variable indicating different types penalty p_param numerical vector penalty function. p_param[1] store sthe lambda value provided lambda_seq. lambda_seq non-negative sequence lambda, along solution path searched. RECOMMENED supply parameter let function determines given data. lambda_length length lambda sequence computing lambda_seq. lambda_seq provided, course lambda_length = length(lambda_seq). mu2 quadratic term ADMM algorithm , bj_vec, cj_vec, rj_vec parameters algorithm. See Algorithm_Details.pdf information. delta_init, eta_stack_init, mu1_init initial values algorithm. tol, max_iter convergence tolerance max number iteration algorithm. verbose integer, indicating level information printed computation, currently supports: always: info something went wrong, e.g. penalty function matched 1: information start stop iteration 2. loss value changed iteration svd_thresh used min_lam_ratio: min(lambda_seq) / max{lambda_seq}. function uses parameter determine minimal value lambda_seq. p > n, recommended set smaller 0.01 (sometimes even 0.05), otherwise can set 0.001 even smaller.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_FLiRTI_Path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finds the solution path of logistic functional additive regression with log-contrast constrain and FLiRTI strategy — Logistic_FAR_FLiRTI_Path","text":"list containing solution path delta, eta_stack, mu1 computation information convergency, iteration number lambda sequence solution path.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_FLiRTI_Path_Further_Improve.html","id":null,"dir":"Reference","previous_headings":"","what":"Post-selection estimation — Logistic_FAR_FLiRTI_Path_Further_Improve","title":"Post-selection estimation — Logistic_FAR_FLiRTI_Path_Further_Improve","text":"function performs post-selection estimation given solution.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_FLiRTI_Path_Further_Improve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post-selection estimation — Logistic_FAR_FLiRTI_Path_Further_Improve","text":"","code":"Logistic_FAR_FLiRTI_Path_Further_Improve(   x_mat,   y_vec,   h,   k_n,   p,   delta_vec_init,   eta_stack_init,   mu1_vec_init,   mu2,   a = 1,   lam = 0.1,   weight_vec = NULL,   tol = 10^(-5),   max_iter = 1000 )"},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_FLiRTI_Path_Further_Improve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Post-selection estimation — Logistic_FAR_FLiRTI_Path_Further_Improve","text":"x_mat covariate matrix, consists two parts. dim(x_mat) = (n, h + p * kn) First h columns demographical covariates(can include intercept term) Rest columns p functional covariates, represented set basis functions resulting kn covariates. y_vec response vector, 0 control, 1 case. n = length(y_vec) number observations. h, k_n, p dimension information dataset(x_mat). delta_vec_init, eta_stack_init, mu1_vec_init Initial values algorithm. function uses initial values find active functional covariates. post-selection estimation begins initial values. mu2 quadratic term ADMM algorithm parameters algorithm. 1st term loss function 1 / * loglik. See Algorithm_Details.pdf information. lam scalar regularize ridge penalty form case model saturation. tol, max_iter convergence tolerance max number iteration algorithm.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_OPath.html","id":null,"dir":"Reference","previous_headings":"","what":"Finds the solution path of logistic functional additive regression with log-contrast constrain. — Logistic_FAR_OPath","title":"Finds the solution path of logistic functional additive regression with log-contrast constrain. — Logistic_FAR_OPath","text":"Logistic_FAR_OPath finds solution path logistic functional additive regression log-contrast constrain. use within-group orthonormalization standardize data real computation.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_OPath.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finds the solution path of logistic functional additive regression with log-contrast constrain. — Logistic_FAR_OPath","text":"","code":"Logistic_FAR_OPath(   y_vec,   x_mat,   h,   kn,   p,   p_type,   p_param,   lambda_seq,   lambda_length,   min_lambda_ratio = 0.01,   mu2,   a,   bj_vec,   cj_vec,   rj_vec,   delta_init,   eta_stack_init,   mu1_init,   tol = 10^(-6),   max_iter = 500,   verbose = 0,   svd_thresh = 10^(-7) )"},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_OPath.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finds the solution path of logistic functional additive regression with log-contrast constrain. — Logistic_FAR_OPath","text":"y_vec response vector, 0 control, 1 case. n = length(y_vec) number observations. x_mat covariate matrix, consists two parts. dim(x_mat) = (n, h + p * kn) First h columns demographical covariates(can include intercept term) Rest columns p functional covariates, represented set basis functions resulting kn covariates. h, kn, p dimension information dataset(x_mat). p_type character variable indicating different types penalty p_param numerical vector penalty function. p_param[1] store sthe lambda value provided lambda_seq. lambda_seq non-negative sequence lambda, along solution path searched. RECOMMENED supply parameter let function determines given data. lambda_length length lambda sequence computing lambda_seq. lambda_seq provided, course lambda_length = length(lambda_seq). mu2 quadratic term ADMM algorithm , bj_vec, cj_vec, rj_vec parameters algorithm. See Algorithm_Details.pdf information. delta_init, eta_stack_init, mu1_init initial values algorithm. tol, max_iter convergence tolerance max number iteration algorithm. verbose integer, indicating level information printed computation, currently supports: always: info something went wrong, e.g. penalty function matched 1: information start stop iteration 2. loss value changed iteration svd_thresh small value threashing singular value vectors. min_lam_ratio: min(lambda_seq) / max{lambda_seq}. function uses parameter determine minimal value lambda_seq. p > n, recommended set smaller 0.01 (sometimes even 0.05), otherwise can set 0.001 even smaller.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_OPath.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finds the solution path of logistic functional additive regression with log-contrast constrain. — Logistic_FAR_OPath","text":"list containing solution path delta, eta_stack, mu1 computation information convergency, iteration number lambda sequence solution path.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_Oracle.html","id":null,"dir":"Reference","previous_headings":"","what":"Oracle estimator of the Logistic FAR problem — Logistic_FAR_Oracle","title":"Oracle estimator of the Logistic FAR problem — Logistic_FAR_Oracle","text":"Logistic_FAR_Oracle computes oracle estimator Logistic FAR problem.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_Oracle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Oracle estimator of the Logistic FAR problem — Logistic_FAR_Oracle","text":"","code":"Logistic_FAR_Oracle(   y_vec,   x_mat,   h,   k_n,   p,   mu_2,   h_inv,   eta_inv_stack,   delta_init,   eta_stack_init,   mu_1_init,   tol,   max_iter )"},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_Oracle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Oracle estimator of the Logistic FAR problem — Logistic_FAR_Oracle","text":"y_vec response vector, 0 control, 1 case. n = length(y_vec) number observations. x_mat covariate matrix, consists two parts. dim(x_mat) = (n, h + p * kn) First h columns demographical covariates. End user can include intercept term. Rest columns p functional covariates, represented set basis functions resulting kn covariates. Hence p * kn columns functional part. h, kn, p dimension information dataset(x_mat). h_inv, eta_inv_stack intermediate variables algorithm. provided, can computed dataset. delta_init, eta_stack_init, mu_1_init initial values algorithm. tol, max_iter convergence tolerance max number iteration algorithm. mu2 quadratic term ADMM algorithm","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_Oracle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Oracle estimator of the Logistic FAR problem — Logistic_FAR_Oracle","text":"high-dimensional statistics, oracle estimator achieved assuming real model structure known, .e. oracle knows relevant covariates model. covariate effects computed unpenalized regression. Basically, functions performs unpenalized Logistic FAR (log-contrast constrain) given dataset y_vec x_mat. Hence end user acts like oracle decide variables passed function. Sometimes, procedure similar post-selection estimation.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_Path.html","id":null,"dir":"Reference","previous_headings":"","what":"Finds the solution path of logistic functional additive regression with log-contrast constrain. — Logistic_FAR_Path","title":"Finds the solution path of logistic functional additive regression with log-contrast constrain. — Logistic_FAR_Path","text":"Logistic_FAR_Path finds solution path logistic functional additive regression log-contrast constrain. perform within-group orthonormalization preprocession data.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_Path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finds the solution path of logistic functional additive regression with log-contrast constrain. — Logistic_FAR_Path","text":"","code":"Logistic_FAR_Path(   y_vec,   x_mat,   h,   kn,   p,   p_type,   p_param,   lambda_seq,   lambda_length,   min_lambda_ratio = 0.01,   mu2,   a = 1,   bj_vec = 1,   cj_vec = sqrt(kn),   rj_vec = 10^(-6),   weight_vec = 1,   logit_weight_vec = 1,   weight_already_combine = FALSE,   delta_init,   eta_stack_init,   mu1_init,   tol = 10^(-6),   max_iter = 500,   verbose = 0,   svd_thresh = 10^{ -7  } )"},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_Path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finds the solution path of logistic functional additive regression with log-contrast constrain. — Logistic_FAR_Path","text":"y_vec response vector, 0 control, 1 case. n = length(y_vec) number observations. x_mat covariate matrix, consists two parts. dim(x_mat) = (n, h + p * kn) First h columns demographical covariates(can include intercept term) Rest columns p functional covariates, represented set basis functions resulting kn covariates. h, kn, p dimension information dataset(x_mat). p_type character variable indicating different types penalty p_param numerical vector penalty function. p_param[1] store sthe lambda value provided lambda_seq. lambda_seq non-negative sequence lambda, along solution path searched. RECOMMENED supply parameter let function determines given data. lambda_length length lambda sequence computing lambda_seq. lambda_seq provided, course lambda_length = length(lambda_seq). mu2 quadratic term ADMM algorithm , bj_vec, cj_vec, rj_vec parameters algorithm. See Algorithm_Details.pdf information. weight_vec weight vector subject. final weight subject adjusted also logit_weight_vec. summation final weight vector normalized n, sample size. logit_weight_vec weight vector subject computing integral logit values. entry positive 1. naive method adjusting early stop interval. weight_already_combine boolen, indicating whether weight_vec already combined logit_weight_vec subject. delta_init, eta_stack_init, mu1_init initial values algorithm. tol, max_iter convergence tolerance max number iteration algorithm. verbose integer, indicating level information printed computation, currently supports: always: info something went wrong, e.g. penalty function matched 1: information start stop iteration 2. loss value changed iteration svd_thresh used min_lam_ratio: min(lambda_seq) / max{lambda_seq}. function uses parameter determine minimal value lambda_seq. p > n, recommended set smaller 0.01 (sometimes even 0.05), otherwise can set 0.001 even smaller.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_Path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finds the solution path of logistic functional additive regression with log-contrast constrain. — Logistic_FAR_Path","text":"list containing solution path delta, eta_stack, mu1 computation information convergency, iteration number lambda sequence solution path.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_Path_Further_Improve.html","id":null,"dir":"Reference","previous_headings":"","what":"Post-selection estimation — Logistic_FAR_Path_Further_Improve","title":"Post-selection estimation — Logistic_FAR_Path_Further_Improve","text":"function performs post-selection estimation given solution.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_Path_Further_Improve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post-selection estimation — Logistic_FAR_Path_Further_Improve","text":"","code":"Logistic_FAR_Path_Further_Improve(   x_mat,   y_vec,   h,   k_n,   p,   delta_vec_init,   eta_stack_init,   mu1_vec_init,   mu2,   a = 1,   lam = 0.1,   weight_vec = 1,   logit_weight_vec = 1,   weight_already_combine = FALSE,   tol = 10^(-5),   max_iter = 1000,   fast_glm = FALSE )"},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Logistic_FAR_Path_Further_Improve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Post-selection estimation — Logistic_FAR_Path_Further_Improve","text":"x_mat covariate matrix, consists two parts. dim(x_mat) = (n, h + p * kn) First h columns demographical covariates(can include intercept term) Rest columns p functional covariates, represented set basis functions resulting kn covariates. y_vec response vector, 0 control, 1 case. n = length(y_vec) number observations. h, k_n, p dimension information dataset(x_mat). delta_vec_init, eta_stack_init, mu1_vec_init Initial values algorithm. function uses initial values find active functional covariates. post-selection estimation begins initial values. mu2 quadratic term ADMM algorithm parameters algorithm. 1st term loss function 1 / * loglik. See Algorithm_Details.pdf information. lam scalar regularize ridge penalty form case model saturation. tol, max_iter convergence tolerance max number iteration algorithm.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Number_Pick.html","id":null,"dir":"Reference","previous_headings":"","what":"Pick covariates those enter the solution path first — Number_Pick","title":"Pick covariates those enter the solution path first — Number_Pick","text":"function picks solution along solution path based pre-specified number covariates","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Number_Pick.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pick covariates those enter the solution path first — Number_Pick","text":"","code":"Number_Pick(   y_vec,   x_mat,   solution_path,   real_logit_vec,   kn,   given_number = 5,   upper_bound = TRUE )"},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Number_Pick.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pick covariates those enter the solution path first — Number_Pick","text":"y_vec response vector, 0 control, 1 case. n = length(y_vec) number observations. x_mat covariate matrix, consists two parts. dim(x_mat) = (n, h + p * kn) First h columns demographical covariates(can include intercept term) Rest columns p functional covariates, represented set basis functions resulting kn covariates. solution_path solution path function Logistic_FAR_Path real_logit_vec used function kn number basis functions.(also number covariates group) given_number pre-specified number. function pick given_number functional covariates enter solution path first. upper_bound Logical, default TRUE. Whether given_number strict upper bound. TRUE, picked model number active functional covariates closest never exceeds .","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Number_Pick.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pick covariates those enter the solution path first — Number_Pick","text":"Note practice, number selected number functional covariates might increase 1. Therefore uncommon eventually pick less () pre-specified number.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Replace_Fixef_NA.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and replace NA with 0 in the fixed-effect coefficients from a Mixed-effect model — Replace_Fixef_NA","title":"Get and replace NA with 0 in the fixed-effect coefficients from a Mixed-effect model — Replace_Fixef_NA","text":"Get replace NA 0 fixed-effect coefficients Mixed-effect model","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Replace_Fixef_NA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and replace NA with 0 in the fixed-effect coefficients from a Mixed-effect model — Replace_Fixef_NA","text":"","code":"Replace_Fixef_NA(in_model)"},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Replace_Fixef_NA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and replace NA with 0 in the fixed-effect coefficients from a Mixed-effect model — Replace_Fixef_NA","text":"in_model input model, expected lme4::glmer.","code":""},{"path":"https://fenguoerbian.github.io/LogisticFAR/reference/Replace_Fixef_NA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get and replace NA with 0 in the fixed-effect coefficients from a Mixed-effect model — Replace_Fixef_NA","text":"fiexed-effect coefficients input model. dropped columns () populated also coefficients 0.","code":""}]
